# -*- coding: utf-8 -*-
"""Hello, Colaboratory

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/notebooks/welcome.ipynb
"""

import tensorflow as tf
import numpy as np

mnist = tf.keras.datasets.mnist.load_data()

(x_train, y_train), (x_test, y_test) = mnist
# x_train = np.reshape(x_train, (-1, 784))
x_train = (x_train.astype(np.float32) - 127) / 127.
print(x_train[0])
x_train = {'pixel': x_train}
# y_train = np.array(y_train, dtype=tf.int32)

def train_input_fn(features, labels, batch_size):
  mnist_ds = tf.data.Dataset.from_tensor_slices((x_train, y_train.astype(np.int32)))
  mnist_ds = mnist_ds.shuffle(60000).repeat().batch(batch_size)
  return mnist_ds

# my_feature_columns = []
# for key in x_train.keys():
#   my_feature_columns.append(tf.feature_column.numeric_column(key=key))

classifier = tf.estimator.DNNClassifier(
    feature_columns=[tf.feature_column.numeric_column(key='pixel', shape=(28, 28))],
    hidden_units=[1000, 1000],
    n_classes=10
)

classifier.train(
    input_fn=lambda:train_input_fn(x_train, y_train, 100),
    steps=1000000
)